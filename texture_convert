#!/usr/bin/python

from PIL import Image
import struct

import argparse
import os

parser = argparse.ArgumentParser(description='Convert texture to binary.')
parser.add_argument(
	'-i', '--input',
	metavar='input_filename',
	type=str,
	nargs=1,
	required=True,
	help='Filename of the image to convert.',
)
parser.add_argument(
	'-o', '--output',
	metavar='output_filename',
	type=str,
	nargs=1,
	required=True,
	help='Filename for the output image.',
)
parser.add_argument(
	'-t', '--type',
	metavar='type',
	type=str,
	nargs=1,
	required=True,
	help='Type of output to create. e.g. Tile_Render_Texture',
)
parser.add_argument(
	'--tile-width',
	metavar='tile_width',
	type=str,
	nargs=1,
	required=False,
)
parser.add_argument(
	'--tile-height',
	metavar='tile_height',
	type=str,
	nargs=1,
	required=False,
)
parser.add_argument(
	'-f', '--flip-y',
	dest='flip_y',
	action='store_true',
)
parser.add_argument(
	'-n', '--name',
	metavar='name',
	type=str,
	nargs=1,
	required=True,
	help='Pascal_Case name for header file.',
)
parser.set_defaults(flip_y=False)

args = parser.parse_args()
in_filename = args.input[0]
out_filename = args.output[0]
flip_y = args.flip_y
name = args.name[0]
type = args.type[0]
tile_width = args.tile_width[0]
tile_height = args.tile_height[0]

img = Image.open(in_filename, 'r')

width, height = img.width, img.height

# TODO -- options for different colour spaces - currently just doing 1 bit textures

data = []
for y in range(height):
	if flip_y:
		y = height - y - 1
	for x in range(width):
		r, g, b, a = img.getpixel((x, y))
		if type == 'Tile_Render_Texture' or type == 'Sprite_Render_Texture':
			val = '0x{:02X}{:02X}{:02X}{:02X}'.format(a, b, g, r)
		elif type == 'Mouse_Map':
			val = 1 if a else 0
		else:
			r, _g, _b, _a = img.getpixel((x, y))
			val = '0xFF' if r else '0x00'
		data.append(val)

if type == 'Mouse_Map':
	data.extend([0] * ((- (width * height)) % 8))
	new_data = []
	for n in range(0, len(data), 8):
		this_byte = data[n:n+8]
		acc = 0
		for i in range(8):
			acc += this_byte[i] * (1 << i)
		new_data.append(acc)
	data = ['0x{:02X}'.format(s) for s in new_data]

output_template = '''
#ifndef TEXTURE_{texture_name_upper}_H
#define TEXTURE_{texture_name_upper}_H

#include "jfg/prelude.h"

struct Texture_{texture_name_pascal}
{{
	u32 width, height;
	u8 data[{data_length}];
}};

extern const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper};

#ifndef JFG_HEADER_ONLY
const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper} = {{
	{width},
	{height},
	{{ {data} }}
}};
#endif

#endif
'''.strip()

tile_render_texture_template = '''
#ifndef TILE_RENDER_TEXTURE_{texture_name_upper}_H
#define TILE_RENDER_TEXTURE_{texture_name_upper}_H

#include "jfg/prelude.h"
#include "tile_render.h"

struct Texture_{texture_name_pascal}
{{
	Tile_Render_Texture header;
	u32 data[{data_length}];
}};

extern const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper};

#ifndef JFG_HEADER_ONLY
const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper} = {{
	{{
		{{ {width}, {height} }},
		{{ {tile_width}, {tile_height} }},
		(void*)TEXTURE_{texture_name_upper}.data
	}},
	{{ {data} }}
}};
#endif

#endif
'''.strip()

sprite_render_texture_template = '''
#ifndef SPRITE_RENDER_TEXTURE_{texture_name_upper}_H
#define SPRITE_RENDER_TEXTURE_{texture_name_upper}_H

#include "jfg/prelude.h"
#include "sprite_render.h"

struct Texture_{texture_name_pascal}
{{
	Sprite_Render_Texture header;
	u32 data[{data_length}];
}};

extern const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper};

#ifndef JFG_HEADER_ONLY
const Texture_{texture_name_pascal} TEXTURE_{texture_name_upper} = {{
	{{
		{{ {width}, {height} }},
		{{ {tile_width}, {tile_height} }},
		(void*)TEXTURE_{texture_name_upper}.data
	}},
	{{ {data} }}
}};
#endif

#endif
'''.strip()

mouse_map_template = '''
#ifndef MOUSE_MAP_{texture_name_upper}_H
#define MOUSE_MAP_{texture_name_upper}_H

#include "jfg/prelude.h"
#include "mouse_map.h"

struct Mouse_Map_{texture_name_pascal}
{{
	Mouse_Map_Header header;
	u8 data[{data_length}];
}};

extern const Mouse_Map_{texture_name_pascal} MOUSE_MAP_{texture_name_upper};

#ifndef JFG_HEADER_ONLY
const Mouse_Map_{texture_name_pascal} MOUSE_MAP_{texture_name_upper} = {{
	{{
		{{ {width}, {height} }},
		{{ {tile_width}, {tile_height} }},
		(u8*)MOUSE_MAP_{texture_name_upper}.data
	}},
	{{ {data} }}
}};
#endif

#endif
'''.strip()

if   type == 'Tile_Render_Texture':
	output_template = tile_render_texture_template
elif type == 'Sprite_Render_Texture':
	output_template = sprite_render_texture_template
elif type == 'Mouse_Map':
	output_template = mouse_map_template

output = output_template.format(
	texture_name_upper=name.upper(),
	texture_name_pascal=name,
	data_length=width * height,
	width=width,
	height=height,
	data=', '.join(data),
	tile_width=tile_width,
	tile_height=tile_height,
)

with open(out_filename, 'w') as outfile:
	outfile.write(output)
